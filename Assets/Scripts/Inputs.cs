//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Data/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""_"",
            ""id"": ""a2557da5-f250-4eda-9ab5-c9cfb649bc92"",
            ""actions"": [
                {
                    ""name"": ""Low"",
                    ""type"": ""Button"",
                    ""id"": ""a5dba041-0354-469e-8825-2fd95bcfea5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Medium"",
                    ""type"": ""Button"",
                    ""id"": ""6f8b9deb-68ef-4761-bdd1-9e471a351549"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""High"",
                    ""type"": ""Button"",
                    ""id"": ""9fd6d53f-c4cb-4ba0-a7e7-84b8c4c4a5c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e0141a8-2f2f-4fb8-ad34-7ece86ebb3b8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Low"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e61849b-b277-4599-a8f5-834bfd4357c9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""High"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6297bfe4-2dbe-4192-84ce-bcd522686b5a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Medium"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // _
        m__ = asset.FindActionMap("_", throwIfNotFound: true);
        m___Low = m__.FindAction("Low", throwIfNotFound: true);
        m___Medium = m__.FindAction("Medium", throwIfNotFound: true);
        m___High = m__.FindAction("High", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // _
    private readonly InputActionMap m__;
    private I_Actions m__ActionsCallbackInterface;
    private readonly InputAction m___Low;
    private readonly InputAction m___Medium;
    private readonly InputAction m___High;
    public struct _Actions
    {
        private @Inputs m_Wrapper;
        public _Actions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Low => m_Wrapper.m___Low;
        public InputAction @Medium => m_Wrapper.m___Medium;
        public InputAction @High => m_Wrapper.m___High;
        public InputActionMap Get() { return m_Wrapper.m__; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_Actions set) { return set.Get(); }
        public void SetCallbacks(I_Actions instance)
        {
            if (m_Wrapper.m__ActionsCallbackInterface != null)
            {
                @Low.started -= m_Wrapper.m__ActionsCallbackInterface.OnLow;
                @Low.performed -= m_Wrapper.m__ActionsCallbackInterface.OnLow;
                @Low.canceled -= m_Wrapper.m__ActionsCallbackInterface.OnLow;
                @Medium.started -= m_Wrapper.m__ActionsCallbackInterface.OnMedium;
                @Medium.performed -= m_Wrapper.m__ActionsCallbackInterface.OnMedium;
                @Medium.canceled -= m_Wrapper.m__ActionsCallbackInterface.OnMedium;
                @High.started -= m_Wrapper.m__ActionsCallbackInterface.OnHigh;
                @High.performed -= m_Wrapper.m__ActionsCallbackInterface.OnHigh;
                @High.canceled -= m_Wrapper.m__ActionsCallbackInterface.OnHigh;
            }
            m_Wrapper.m__ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Low.started += instance.OnLow;
                @Low.performed += instance.OnLow;
                @Low.canceled += instance.OnLow;
                @Medium.started += instance.OnMedium;
                @Medium.performed += instance.OnMedium;
                @Medium.canceled += instance.OnMedium;
                @High.started += instance.OnHigh;
                @High.performed += instance.OnHigh;
                @High.canceled += instance.OnHigh;
            }
        }
    }
    public _Actions @_ => new _Actions(this);
    public interface I_Actions
    {
        void OnLow(InputAction.CallbackContext context);
        void OnMedium(InputAction.CallbackContext context);
        void OnHigh(InputAction.CallbackContext context);
    }
}
